{"version":3,"sources":["components/TodoItem.js","components/TodoList.js","components/layout/header.js","components/AddTodo.js","App.js","serviceWorker.js","index.js"],"names":["btnStyle","background","color","border","padding","borderRadius","float","cursor","TodoItem","props","style","backgroundColor","textDecoration","todos","completed","type","onChange","markComplete","id","title","onClick","deleteTodo","TodoList","map","todo","key","header","headerStyle","textAlign","AddTodo","useState","inputState","setInputState","onSubmit","event","preventDefault","addTodo","display","name","flex","placeholder","target","value","className","App","todoState","setTodoState","useEffect","axios","get","then","res","data","Fragment","post","delete","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.808f1999.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst TodoItem = (props) => {\r\n  const getStyle = () => {\r\n    return {\r\n      backgroundColor: \"#f4f4f4\",\r\n      border: \"2px dotted\",\r\n      padding: \"20px 20px\",\r\n      textDecoration: props.todos.completed ? \"line-through\" : \"none\",\r\n    };\r\n  };\r\n\r\n  return (\r\n    <div style={getStyle()}>\r\n      <p>\r\n        <input\r\n          type=\"checkbox\"\r\n          onChange={() => props.markComplete(props.todos.id)}\r\n        />{\" \"}\r\n        {props.todos.title}\r\n        <button\r\n          style={btnStyle}\r\n          onClick={() => props.deleteTodo(props.todos.id)}>\r\n          x\r\n        </button>\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst btnStyle = {\r\n  background: \"#ff0000\",\r\n  color: \"#fff\",\r\n  border: \"none\",\r\n  padding: \"5px 9px\",\r\n  borderRadius: \"50%\",\r\n  float: \"right\",\r\n  cursor: \"pointer\",\r\n};\r\n\r\n//PropTypes\r\nTodoItem.propTypes = {\r\n  todos: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default TodoItem;\r\n","import React from \"react\";\r\nimport TodoItem from \"./TodoItem\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst TodoList = (props) => {\r\n  return props.todos.map((todo) => {\r\n    return (\r\n      <TodoItem\r\n        key={todo.id}\r\n        todos={todo}\r\n        markComplete={props.markComplete}\r\n        deleteTodo={props.deleteTodo}\r\n      />\r\n    );\r\n  });\r\n};\r\n\r\n//PropTypes\r\nTodoList.propTypes = {\r\n  todos: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default TodoList;\r\n","import React from \"react\";\r\n\r\nexport default function header() {\r\n  return (\r\n    <header style={headerStyle}>\r\n      <h1>TODO List</h1>\r\n    </header>\r\n  );\r\n}\r\n\r\nconst headerStyle = {\r\n  background: \"#333\",\r\n  color: \"#fff\",\r\n  padding: \"10px\",\r\n  textAlign: \"center\",\r\n};\r\n\r\n// const linkStyle = {\r\n//   color: \"white\",\r\n//   textDecoration: \"underline\",\r\n// };\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function AddTodo(props) {\r\n  const [inputState, setInputState] = useState({\r\n    title: \"\",\r\n  });\r\n\r\n  const onChange = (event) => {\r\n    setInputState({\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n\r\n  const onSubmit = (event) => {\r\n    event.preventDefault();\r\n    props.addTodo(inputState.title);\r\n    setInputState({ title: \"\" });\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={onSubmit} style={{ display: \"flex\" }}>\r\n      <input\r\n        type=\"text\"\r\n        name=\"title\"\r\n        style={{ flex: \"9\", padding: \"10px\" }}\r\n        placeholder=\"Add Todo\"\r\n        onChange={onChange}\r\n        value={inputState.title}\r\n      />\r\n      <button className=\"btn\" style={{ flex: \"2\" }}>\r\n        Submit\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport TodoList from \"./components/TodoList\";\nimport Header from \"./components/layout/header\";\nimport AddTodo from \"./components/AddTodo\";\n// import { v4 as uuidv4 } from \"uuid\";\nimport axios from \"axios\";\n\nconst App = () => {\n  const [todoState, setTodoState] = useState({\n    todos: [],\n  });\n\n  useEffect(() => {\n    axios\n      .get(\"https://jsonplaceholder.typicode.com/todos?_limit=10\")\n      .then((res) => setTodoState({ todos: res.data }));\n  }, []);\n\n  const markComplete = (id) => {\n    setTodoState({\n      todos: todoState.todos.map((todo) => {\n        if (todo.id === id) {\n          todo.completed = !todo.completed;\n        }\n        return todo;\n      }),\n    });\n  };\n\n  const deleteTodo = (id) => {\n    axios\n      .delete(\"https://jsonplaceholder.typicode.com/todos/$(id)\")\n      .then((res) =>\n        setTodoState({\n          todos: todoState.todos.filter((todo) => todo.id !== id),\n        })\n      );\n  };\n\n  const addTodo = (title) => {\n    axios\n      .post(\"https://jsonplaceholder.typicode.com/todos\", {\n        title: title,\n        completed: false,\n      })\n      .then((res) =>\n        setTodoState({\n          todos: [...todoState.todos, res.data],\n        })\n      );\n  };\n\n  return (\n      <div className=\"App\">\n        <div className=\"container\">\n              <React.Fragment>\n                <Header />\n                <AddTodo addTodo={addTodo} />\n                <TodoList\n                  todos={todoState.todos}\n                  markComplete={markComplete}\n                  deleteTodo={deleteTodo}\n                />\n              </React.Fragment>\n        </div>\n      </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}